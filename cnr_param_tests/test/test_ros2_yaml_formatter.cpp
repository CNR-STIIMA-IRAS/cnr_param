#include <gtest/gtest.h>
#include <yaml-cpp/yaml.h>

#if ROS2_MODULE

// Include the header file for the function being tested
#include "cnr_param/ros2/yaml_formatter.h"

TEST(Ros2YamlEncoderTest, ScalarNode)
{
  // Create a YAML scalar node
  YAML::Node node;
  node["key"] = "value";

  // Call the function being tested
  std::string what;
  YAML::Node result; 
  EXPECT_TRUE(cnr::param::ros2::ros2_yaml_encoder(node, result, what));

  // Check the expected output
  EXPECT_EQ(result["key"].as<std::string>(), "value");
}

TEST(Ros2YamlEncoderTest, SequenceNode)
{
  // Create a YAML sequence node
  YAML::Node node;
  node["key"].push_back("value1");
  node["key"].push_back("value2");

  // Call the function being tested
  std::string what;
  YAML::Node result; 
  EXPECT_TRUE(cnr::param::ros2::ros2_yaml_encoder(node, result, what));
  
  // Check the expected output
  EXPECT_EQ(result["key"][0].as<std::string>(), "value1");
  EXPECT_EQ(result["key"][1].as<std::string>(), "value2");
}

TEST(Ros2YamlEncoderTest, MapNode)
{
  // Create a YAML map node
  YAML::Node node;
  node["key1"]["subkey1"] = "value1";
  node["key1"]["subkey2"] = "value2";
  node["key2"]["subkey3"] = "value3";

  // Call the function being tested
  std::string what;
  YAML::Node result; 
  EXPECT_TRUE(cnr::param::ros2::ros2_yaml_encoder(node, result, what));

  // Check the expected output
  EXPECT_EQ(result["key1"]["subkey1"].as<std::string>(), "value1");
  EXPECT_EQ(result["key1"]["subkey2"].as<std::string>(), "value2");
  EXPECT_EQ(result["key2"]["subkey3"].as<std::string>(), "value3");
}

TEST(Ros2YamlEncoderTest, SequenceOfSequenceNode)
{
  // Create a YAML sequence node
  YAML::Node v =  YAML::Load("[2, 3, 5, 7, 11]");
  YAML::Node node;
  node["key"].push_back(v);
  node["key"].push_back(v);

  // Call the function being tested
  std::string what;
  YAML::Node result; 
  EXPECT_TRUE(cnr::param::ros2::ros2_yaml_encoder(node, result, what));

  // Check the expected output
  EXPECT_EQ(bool(result["key"]), false);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Sequence"]), true);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Sequence"]["size"]), true);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Sequence"]["record_0"]), true);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Sequence"]["record_1"]), true);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Sequence"]["size"].as<int>(), 2);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Sequence"]["record_0"].as<std::vector<int>>()[0], 2);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Sequence"]["record_0"].as<std::vector<int>>()[1], 3);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Sequence"]["record_0"].as<std::vector<int>>()[2], 5);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Sequence"]["record_1"].as<std::vector<int>>()[0], 2);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Sequence"]["record_1"].as<std::vector<int>>()[1], 3);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Sequence"]["record_1"].as<std::vector<int>>()[2], 5);
}

TEST(Ros2YamlEncoderTest, SequenceOfMapsNode)
{
  // Create a YAML sequence node
  YAML::Node v =  YAML::Load("{a: 2, b: 3, c: 5}");
  YAML::Node v2 =  YAML::Load("{a: 22, b: 33, c: 55}");
  YAML::Node node;
  node["key"].push_back(v);
  node["key"].push_back(v);
  node["key"].push_back(v2);

  // Call the function being tested
  std::string what;
  YAML::Node result; 
  EXPECT_TRUE(cnr::param::ros2::ros2_yaml_encoder(node, result, what));

  // Check the expected output
  EXPECT_EQ(bool(result["key"]), false);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]), true);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["size"]), true);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_0"]), true);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_0"]["a"]), true);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_0"]["b"]), true);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_0"]["c"]), true);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_1"]), true);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_1"]["a"]), true);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_1"]["b"]), true);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_1"]["c"]), true);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_2"]), true);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_2"]["a"]), true);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_2"]["b"]), true);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_2"]["c"]), true);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["size"].as<int>(), 3);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_0"]["a"].as<int>(), 2);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_0"]["b"].as<int>(), 3);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_0"]["c"].as<int>(), 5);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_1"]["a"].as<int>(), 2);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_1"]["b"].as<int>(), 3);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_1"]["c"].as<int>(), 5);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_2"]["a"].as<int>(), 22);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_2"]["b"].as<int>(), 33);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_2"]["c"].as<int>(), 55);
}

TEST(Ros2YamlEncoderTest, SequenceOfComplexTypesNode)
{
  // Create a YAML sequence node
  YAML::Node v =  YAML::Load("{a: [1,2,3,4], b: [[b11, b12, b13], [b21, b22, b23], [b31, b32, b33]], c: { c1: 1, c2: 2, c3: [1, 2, 3], c4: [[1, 2, 3], [11, 22, 33]] } }");
  YAML::Node node;
  node["key"].push_back(v);
  node["key"].push_back(v);

  // Call the function being tested
  std::string what;
  YAML::Node result; 
  EXPECT_TRUE(cnr::param::ros2::ros2_yaml_encoder(node, result, what));

  // Check the expected output
  EXPECT_EQ(bool(result["key"]), false);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]), true);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["size"]), true);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_0"]), true);
  
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_0"]["a"]), true);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_0"]["b"]), false);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_0"]["b_autogenerated_from_sequence_of_Sequence"]), true);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_0"]["b_autogenerated_from_sequence_of_Sequence"]["size"]), true);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_0"]["b_autogenerated_from_sequence_of_Sequence"]["record_0"]), true);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_0"]["b_autogenerated_from_sequence_of_Sequence"]["record_1"]), true);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_0"]["b_autogenerated_from_sequence_of_Sequence"]["record_2"]), true);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_0"]["c"]), true);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_0"]["c"]["c1"]), true);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_0"]["c"]["c2"]), true);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_0"]["c"]["c3"]), true);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_0"]["c"]["c4"]), false);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_0"]["c"]["c4_autogenerated_from_sequence_of_Sequence"]), true);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_0"]["a"].as<std::vector<int>>()[0], 1);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_0"]["a"].as<std::vector<int>>()[0], 1);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_0"]["a"].as<std::vector<int>>()[1], 2);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_0"]["a"].as<std::vector<int>>()[2], 3);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_0"]["a"].as<std::vector<int>>()[3], 4);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_0"]["b_autogenerated_from_sequence_of_Sequence"]["size"].as<int>(), 3);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_0"]["b_autogenerated_from_sequence_of_Sequence"]["record_0"].as<std::vector<std::string>>()[0], "b11");
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_0"]["b_autogenerated_from_sequence_of_Sequence"]["record_0"].as<std::vector<std::string>>()[1], "b12");
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_0"]["b_autogenerated_from_sequence_of_Sequence"]["record_0"].as<std::vector<std::string>>()[2], "b13");
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_0"]["b_autogenerated_from_sequence_of_Sequence"]["record_1"].as<std::vector<std::string>>()[0], "b21");
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_0"]["b_autogenerated_from_sequence_of_Sequence"]["record_1"].as<std::vector<std::string>>()[1], "b22");
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_0"]["b_autogenerated_from_sequence_of_Sequence"]["record_1"].as<std::vector<std::string>>()[2], "b23");
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_0"]["b_autogenerated_from_sequence_of_Sequence"]["record_2"].as<std::vector<std::string>>()[0], "b31");
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_0"]["b_autogenerated_from_sequence_of_Sequence"]["record_2"].as<std::vector<std::string>>()[1], "b32");
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_0"]["b_autogenerated_from_sequence_of_Sequence"]["record_2"].as<std::vector<std::string>>()[2], "b33");
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_0"]["c"]["c1"].as<int>(), 1);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_0"]["c"]["c2"].as<int>(), 2);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_0"]["c"]["c3"].as<std::vector<int>>()[0], 1);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_0"]["c"]["c3"].as<std::vector<int>>()[1], 2);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_0"]["c"]["c3"].as<std::vector<int>>()[2], 3);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_0"]["c"]["c4_autogenerated_from_sequence_of_Sequence"]["size"].as<int>(), 2);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_0"]["c"]["c4_autogenerated_from_sequence_of_Sequence"]["record_0"].as<std::vector<int>>()[0], 1);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_0"]["c"]["c4_autogenerated_from_sequence_of_Sequence"]["record_0"].as<std::vector<int>>()[1], 2);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_0"]["c"]["c4_autogenerated_from_sequence_of_Sequence"]["record_0"].as<std::vector<int>>()[2], 3);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_0"]["c"]["c4_autogenerated_from_sequence_of_Sequence"]["record_1"].as<std::vector<int>>()[0], 11);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_0"]["c"]["c4_autogenerated_from_sequence_of_Sequence"]["record_1"].as<std::vector<int>>()[1], 22);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_0"]["c"]["c4_autogenerated_from_sequence_of_Sequence"]["record_1"].as<std::vector<int>>()[2], 33);

  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_1"]), true);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_1"]["a"]), true);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_1"]["b"]), false);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_1"]["b_autogenerated_from_sequence_of_Sequence"]), true);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_1"]["b_autogenerated_from_sequence_of_Sequence"]["size"]), true);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_1"]["b_autogenerated_from_sequence_of_Sequence"]["record_0"]), true);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_1"]["b_autogenerated_from_sequence_of_Sequence"]["record_1"]), true);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_1"]["b_autogenerated_from_sequence_of_Sequence"]["record_2"]), true);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_1"]["c"]), true);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_1"]["c"]["c1"]), true);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_1"]["c"]["c2"]), true);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_1"]["c"]["c3"]), true);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_1"]["c"]["c4"]), false);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_1"]["c"]["c4_autogenerated_from_sequence_of_Sequence"]), true);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_1"]["a"].as<std::vector<int>>()[0], 1);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_1"]["a"].as<std::vector<int>>()[0], 1);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_1"]["a"].as<std::vector<int>>()[1], 2);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_1"]["a"].as<std::vector<int>>()[2], 3);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_1"]["a"].as<std::vector<int>>()[3], 4);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_1"]["b_autogenerated_from_sequence_of_Sequence"]["size"].as<int>(), 3);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_1"]["b_autogenerated_from_sequence_of_Sequence"]["record_0"].as<std::vector<std::string>>()[0], "b11");
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_1"]["b_autogenerated_from_sequence_of_Sequence"]["record_0"].as<std::vector<std::string>>()[1], "b12");
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_1"]["b_autogenerated_from_sequence_of_Sequence"]["record_0"].as<std::vector<std::string>>()[2], "b13");
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_1"]["b_autogenerated_from_sequence_of_Sequence"]["record_1"].as<std::vector<std::string>>()[0], "b21");
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_1"]["b_autogenerated_from_sequence_of_Sequence"]["record_1"].as<std::vector<std::string>>()[1], "b22");
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_1"]["b_autogenerated_from_sequence_of_Sequence"]["record_1"].as<std::vector<std::string>>()[2], "b23");
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_1"]["b_autogenerated_from_sequence_of_Sequence"]["record_2"].as<std::vector<std::string>>()[0], "b31");
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_1"]["b_autogenerated_from_sequence_of_Sequence"]["record_2"].as<std::vector<std::string>>()[1], "b32");
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_1"]["b_autogenerated_from_sequence_of_Sequence"]["record_2"].as<std::vector<std::string>>()[2], "b33");
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_1"]["c"]["c1"].as<int>(), 1);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_1"]["c"]["c2"].as<int>(), 2);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_1"]["c"]["c3"].as<std::vector<int>>()[0], 1);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_1"]["c"]["c3"].as<std::vector<int>>()[1], 2);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_1"]["c"]["c3"].as<std::vector<int>>()[2], 3);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_1"]["c"]["c4_autogenerated_from_sequence_of_Sequence"]["size"].as<int>(), 2);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_1"]["c"]["c4_autogenerated_from_sequence_of_Sequence"]["record_0"].as<std::vector<int>>()[0], 1);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_1"]["c"]["c4_autogenerated_from_sequence_of_Sequence"]["record_0"].as<std::vector<int>>()[1], 2);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_1"]["c"]["c4_autogenerated_from_sequence_of_Sequence"]["record_0"].as<std::vector<int>>()[2], 3);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_1"]["c"]["c4_autogenerated_from_sequence_of_Sequence"]["record_1"].as<std::vector<int>>()[0], 11);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_1"]["c"]["c4_autogenerated_from_sequence_of_Sequence"]["record_1"].as<std::vector<int>>()[1], 22);
  EXPECT_EQ(result["key_autogenerated_from_sequence_of_Map"]["record_1"]["c"]["c4_autogenerated_from_sequence_of_Sequence"]["record_1"].as<std::vector<int>>()[2], 33);
}
// Add more test cases as needed

TEST(Ros2YamlEncoderTest, SequenceOfSequenceOfMap)
{
  // Create a YAML sequence node
  YAML::Node v =  YAML::Load("{a: [ {b: 1, s: ciao }, {b: 2, s: bye } ]}");
  YAML::Node node;
  node["key"].push_back(v);
  node["key"].push_back(v);

  // Call the function being tested
  std::string what;
  YAML::Node result; 
  EXPECT_TRUE(cnr::param::ros2::ros2_yaml_encoder(node, result, what));
}


//==============================================
//==============================================
//==============================================
//==============================================
//==============================================
//==============================================
//==============================================


TEST(Ros2YamlDecoderTest, SequenceOfSequenceNode)
{
  // Create a YAML sequence node
  YAML::Node v =  YAML::Load("{size: 2, record_0: [2, 3, 5], record_1: [2, 3, 5]}");
  YAML::Node node;
  node["key_autogenerated_from_sequence_of_Sequence"] = v;

  // Call the function being tested
  std::string what;
  YAML::Node result; 
  EXPECT_TRUE(cnr::param::ros2::ros2_yaml_decoder(node, result, what));

  // Check the expected output
  EXPECT_EQ(bool(result["key"]), true);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Sequence"]), false);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Sequence"]["size"]), false);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Sequence"]["record_0"]), false);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Sequence"]["record_1"]), false);
  EXPECT_EQ(result["key"][0].as<std::vector<int>>()[0], 2);
  EXPECT_EQ(result["key"][0].as<std::vector<int>>()[1], 3);
  EXPECT_EQ(result["key"][0].as<std::vector<int>>()[2], 5);
  EXPECT_EQ(result["key"][1].as<std::vector<int>>()[0], 2);
  EXPECT_EQ(result["key"][1].as<std::vector<int>>()[1], 3);
  EXPECT_EQ(result["key"][1].as<std::vector<int>>()[2], 5);
}

TEST(Ros2YamlDecoderTest, SequenceOfMapsNode)
{
  // Create a YAML sequence node
  YAML::Node v =  YAML::Load("{a: 2, b: 3, c: 5}");
  YAML::Node v2 =  YAML::Load("{a: 22, b: 33, c: 55}");
  YAML::Node node;
  node["key_autogenerated_from_sequence_of_Map"]["size"] = 3;
  node["key_autogenerated_from_sequence_of_Map"]["record_0"] = v;
  node["key_autogenerated_from_sequence_of_Map"]["record_1"] = v;
  node["key_autogenerated_from_sequence_of_Map"]["record_2"] = v2;

// Call the function being tested
  std::string what;
  YAML::Node result; 
  EXPECT_TRUE(cnr::param::ros2::ros2_yaml_decoder(node, result, what));

  // Check the expected output
  EXPECT_EQ(bool(result["key"]), true);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]), false);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["size"]), false);
   EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_0"]), false);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_0"]["a"]), false);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_0"]["b"]), false);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_0"]["c"]), false);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_1"]), false);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_1"]["a"]), false);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_1"]["b"]), false);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_1"]["c"]), false);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_2"]), false);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_2"]["a"]), false);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_2"]["b"]), false);
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Map"]["record_2"]["c"]), false);
  EXPECT_EQ(result["key"][0]["a"].as<int>(), 2);
  EXPECT_EQ(result["key"][0]["b"].as<int>(), 3);
  EXPECT_EQ(result["key"][0]["c"].as<int>(), 5);
  EXPECT_EQ(result["key"][1]["a"].as<int>(), 2);
  EXPECT_EQ(result["key"][1]["b"].as<int>(), 3);
  EXPECT_EQ(result["key"][1]["c"].as<int>(), 5);
  EXPECT_EQ(result["key"][2]["a"].as<int>(), 22);
  EXPECT_EQ(result["key"][2]["b"].as<int>(), 33);
  EXPECT_EQ(result["key"][2]["c"].as<int>(), 55);
}

TEST(Ros2YamlDecoderTest, SequenceOfComplexTypesNode)
{
  // Create a YAML sequence node
  YAML::Node v =  YAML::Load("{a: [1,2,3,4], b: [[b11, b12, b13], [b21, b22, b23], [b31, b32, b33]], c: { c1: 1, c2: 2, c3: [1, 2, 3], c4: [[1, 2, 3], [11, 22, 33]] } }");
  YAML::Node node;
  node["key"].push_back(v);
  node["key"].push_back(v);

  // Call the function being tested
  std::string what;
  YAML::Node encoded;
  EXPECT_TRUE(cnr::param::ros2::ros2_yaml_encoder(node, encoded, what));

  // Call the function being tested
  YAML::Node result; 
  EXPECT_TRUE(cnr::param::ros2::ros2_yaml_decoder(node, result, what));
  
  // Check the expected output
  EXPECT_EQ(bool(result["key_autogenerated_from_sequence_of_Sequence"]), false);
  EXPECT_EQ(bool(result["key"]), true);
  EXPECT_EQ(bool(result["key"]["size"]), false);
  EXPECT_EQ(bool(result["key"]["record_0"]), false);
  
  EXPECT_EQ(bool(result["key"][0]["a"]), true);
  EXPECT_EQ(bool(result["key"][0]["b"]), true);
  EXPECT_EQ(bool(result["key"][0]["b_autogenerated_from_sequence_of_Sequence"]), false);
  EXPECT_EQ(bool(result["key"][0]["b_autogenerated_from_sequence_of_Sequence"]["size"]), false);
  EXPECT_EQ(bool(result["key"][0]["b_autogenerated_from_sequence_of_Sequence"]["record_0"]), false);
  EXPECT_EQ(bool(result["key"][0]["b_autogenerated_from_sequence_of_Sequence"]["record_1"]), false);
  EXPECT_EQ(bool(result["key"][0]["b_autogenerated_from_sequence_of_Sequence"]["record_2"]), false);
  EXPECT_EQ(bool(result["key"][0]["c"]), true);
  EXPECT_EQ(bool(result["key"][0]["c"]["c1"]), true);
  EXPECT_EQ(bool(result["key"][0]["c"]["c2"]), true);
  EXPECT_EQ(bool(result["key"][0]["c"]["c3"]), true);
  EXPECT_EQ(bool(result["key"][0]["c"]["c4"]), true);
  EXPECT_EQ(bool(result["key"][0]["c"]["c4_autogenerated_from_sequence_of_Sequence"]), false);
  EXPECT_EQ(result["key"][0]["a"].as<std::vector<int>>()[0], 1);
  EXPECT_EQ(result["key"][0]["a"].as<std::vector<int>>()[0], 1);
  EXPECT_EQ(result["key"][0]["a"].as<std::vector<int>>()[1], 2);
  EXPECT_EQ(result["key"][0]["a"].as<std::vector<int>>()[2], 3);
  EXPECT_EQ(result["key"][0]["a"].as<std::vector<int>>()[3], 4);
  EXPECT_EQ(result["key"][0]["b"][0].as<std::vector<std::string>>()[0], "b11");
  EXPECT_EQ(result["key"][0]["b"][0].as<std::vector<std::string>>()[1], "b12");
  EXPECT_EQ(result["key"][0]["b"][0].as<std::vector<std::string>>()[2], "b13");
  EXPECT_EQ(result["key"][0]["b"][1].as<std::vector<std::string>>()[0], "b21");
  EXPECT_EQ(result["key"][0]["b"][1].as<std::vector<std::string>>()[1], "b22");
  EXPECT_EQ(result["key"][0]["b"][1].as<std::vector<std::string>>()[2], "b23");
  EXPECT_EQ(result["key"][0]["b"][2].as<std::vector<std::string>>()[0], "b31");
  EXPECT_EQ(result["key"][0]["b"][2].as<std::vector<std::string>>()[1], "b32");
  EXPECT_EQ(result["key"][0]["b"][2].as<std::vector<std::string>>()[2], "b33");
  EXPECT_EQ(result["key"][0]["c"]["c1"].as<int>(), 1);
  EXPECT_EQ(result["key"][0]["c"]["c2"].as<int>(), 2);
  EXPECT_EQ(result["key"][0]["c"]["c3"].as<std::vector<int>>()[0], 1);
  EXPECT_EQ(result["key"][0]["c"]["c3"].as<std::vector<int>>()[1], 2);
  EXPECT_EQ(result["key"][0]["c"]["c3"].as<std::vector<int>>()[2], 3);
  EXPECT_EQ(result["key"][0]["c"]["c4"][0].as<std::vector<int>>()[0], 1);
  EXPECT_EQ(result["key"][0]["c"]["c4"][0].as<std::vector<int>>()[1], 2);
  EXPECT_EQ(result["key"][0]["c"]["c4"][0].as<std::vector<int>>()[2], 3);
  EXPECT_EQ(result["key"][0]["c"]["c4"][1].as<std::vector<int>>()[0], 11);
  EXPECT_EQ(result["key"][0]["c"]["c4"][1].as<std::vector<int>>()[1], 22);
  EXPECT_EQ(result["key"][0]["c"]["c4"][1].as<std::vector<int>>()[2], 33);

  EXPECT_EQ(bool(result["key"][1]["a"]), true);
  EXPECT_EQ(bool(result["key"][1]["b"]), true);
  EXPECT_EQ(bool(result["key"][1]["b_autogenerated_from_sequence_of_Sequence"]), false);
  EXPECT_EQ(bool(result["key"][1]["b_autogenerated_from_sequence_of_Sequence"]["size"]), false);
  EXPECT_EQ(bool(result["key"][1]["b_autogenerated_from_sequence_of_Sequence"]["record_0"]), false);
  EXPECT_EQ(bool(result["key"][1]["b_autogenerated_from_sequence_of_Sequence"]["record_1"]), false);
  EXPECT_EQ(bool(result["key"][1]["b_autogenerated_from_sequence_of_Sequence"]["record_2"]), false);
  EXPECT_EQ(bool(result["key"][1]["c"]), true);
  EXPECT_EQ(bool(result["key"][1]["c"]["c1"]), true);
  EXPECT_EQ(bool(result["key"][1]["c"]["c2"]), true);
  EXPECT_EQ(bool(result["key"][1]["c"]["c3"]), true);
  EXPECT_EQ(bool(result["key"][1]["c"]["c4"]), true);
  EXPECT_EQ(bool(result["key"][1]["c"]["c4_autogenerated_from_sequence_of_Sequence"]), false);
  EXPECT_EQ(result["key"][1]["a"].as<std::vector<int>>()[0], 1);
  EXPECT_EQ(result["key"][1]["a"].as<std::vector<int>>()[0], 1);
  EXPECT_EQ(result["key"][1]["a"].as<std::vector<int>>()[1], 2);
  EXPECT_EQ(result["key"][1]["a"].as<std::vector<int>>()[2], 3);
  EXPECT_EQ(result["key"][1]["a"].as<std::vector<int>>()[3], 4);
  EXPECT_EQ(result["key"][1]["b"][0].as<std::vector<std::string>>()[0], "b11");
  EXPECT_EQ(result["key"][1]["b"][0].as<std::vector<std::string>>()[1], "b12");
  EXPECT_EQ(result["key"][1]["b"][0].as<std::vector<std::string>>()[2], "b13");
  EXPECT_EQ(result["key"][1]["b"][1].as<std::vector<std::string>>()[0], "b21");
  EXPECT_EQ(result["key"][1]["b"][1].as<std::vector<std::string>>()[1], "b22");
  EXPECT_EQ(result["key"][1]["b"][1].as<std::vector<std::string>>()[2], "b23");
  EXPECT_EQ(result["key"][1]["b"][2].as<std::vector<std::string>>()[0], "b31");
  EXPECT_EQ(result["key"][1]["b"][2].as<std::vector<std::string>>()[1], "b32");
  EXPECT_EQ(result["key"][1]["b"][2].as<std::vector<std::string>>()[2], "b33");
  EXPECT_EQ(result["key"][1]["c"]["c1"].as<int>(), 1);
  EXPECT_EQ(result["key"][1]["c"]["c2"].as<int>(), 2);
  EXPECT_EQ(result["key"][1]["c"]["c3"].as<std::vector<int>>()[0], 1);
  EXPECT_EQ(result["key"][1]["c"]["c3"].as<std::vector<int>>()[1], 2);
  EXPECT_EQ(result["key"][1]["c"]["c3"].as<std::vector<int>>()[2], 3);
  EXPECT_EQ(result["key"][1]["c"]["c4"][0].as<std::vector<int>>()[0], 1);
  EXPECT_EQ(result["key"][1]["c"]["c4"][0].as<std::vector<int>>()[1], 2);
  EXPECT_EQ(result["key"][1]["c"]["c4"][0].as<std::vector<int>>()[2], 3);
  EXPECT_EQ(result["key"][1]["c"]["c4"][1].as<std::vector<int>>()[0], 11);
  EXPECT_EQ(result["key"][1]["c"]["c4"][1].as<std::vector<int>>()[1], 22);
  EXPECT_EQ(result["key"][1]["c"]["c4"][1].as<std::vector<int>>()[2], 33);
}
// Add more test cases as needed

#endif

int main(int argc, char** argv)
{
  testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}