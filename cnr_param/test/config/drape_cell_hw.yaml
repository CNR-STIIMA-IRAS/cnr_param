mqtt_hw:
  type: "cnr/control/MQTTRobotHW"
  appenders      : [file, screen]
  levels         : [trace, info]
  pattern_layout : "[%5p][%d{HH:mm:ss,SSS}][%50M:%04L][%24c] %m%n"
  file_name      : mqtt_hw
  sampling_period: 0.004
  diagnostic_period: 0.1
  maximum_missing_cycles: 100
  feedback_joint_state_timeout: 10

  joint_names:   
  - joint_0
  - joint_1
  - joint_2
  - joint_3
  - joint_4
  - joint_5
  - joint_6

  base_link: "fake_linear_axis" # the base link of the kinematic config - check URDF if some error happens
  tool_link: "link_6" # the final link of the kinematic config - check URDF if some error happens
  robot_description_param: /robot_description
  robot_description_planning_param: /robot_description_planning
  kin_update_period: 0.1

  initial_position: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]  # initial positions for using fake robot only
  
  max_tracking_error: 1
  verbose: false  # to print more stuff on the screen
  
  use_delta_target_pos: false
  delta_pos_from_start: false
  
  use_real_robot: true # true i using real robot, false to use a fake robot
  
  #--- MQTT ---
  
  client_id: "MQTT_HW"
  host: 192.168.125.7   # drapebot -- mqtt broker address
  #host: localhost
  port: 1883
  
  feedback_mqtt_topic: "/robot_1/feedback"
  out_feedback_mqtt_topic: "/ITR_feedback"  # change according to ITR motion planner if needed
  command_mqtt_topic:  "/robot_1/command"
  nominal_trajectory_topic: /joint_pos_target # never change this
  
  use_json: true    # never change this
  # --- end ---
  

  remap_source_args:
  - "/mqtt_hw/js_pub/joint_states"
  remap_target_args:
  - "/joint_states"

  # controller that publishes joint states
  js_pub:
    type: cnr/control/JointStatePublisher
    controlled_joints: all
    kin_update_period : 0.004

  # controller sends open loop command positions
  p_j:
    type: cnr/control/OpenLoopPositionController
    setpoint_topic_name: /joint_pos_target
    controlled_joints: all
    kin_update_period : 0.004
  
    # controller that allows trajectory deformation
  gt_traj_arb:
    type: cnr/control/GTTrajArbitration
    controlled_joints: [ joint_1, joint_2, joint_3, joint_4, joint_5, joint_6]
    
    kin_update_period: 0.04
    
    robot_base_frame  : base_link  # base of the kinematic chain
    robot_tip_frame   : grasping   # frame of the robot 
    force_sensor_frame: grasping   # frame of the sensor position (ply deformation estimation)
    
    use_cartesian_reference: false # false because ITR commands are in joints 
    joint_target_topic:     "/joint_pos_target"
    pose_target:            "/target_cart_pose"
    
    external_wrench_topic: "/deformation_estimation"  # topic where the ply deformation is published
    wrench_deadband: [.05,.03,.02,1,1,0.05] # deadband on the deformation. applys directily at the command received
    use_filtered_wrench: true # better filter it a little
    omega_wrench: 1000 
    wrench_gains: [150,100,100,0,0,1] # this gains multiply the incoming deformation information to convert them into a fake Wrench. 
#    wrench_gains: [150,0,0,0,0,1]
    
    set_wrench_zero: true  # to init the zero wrench with known values. if false the first message is used as offset 
    wrench_zero: [0,0.8,0,0,0,0]  # measured in meters from the force_sensor_frame. is the offset
    
    ### impedance parameters for GT and MG 
    ### [NOTE] all values are WRT base frame
    M_r: [1,1,1,.1,.1,.1]    # mass values [x,y,z,Rx,Ry,Rz]    
    K_r: [0,0,0,0,0,0]       # stiffness values [x,y,z,Rx,Ry,Rz]
    D_r: [100,100,100,1,1,2] # damping values [x,y,z,Rx,Ry,Rz]
    damping_is_ratio: false  # false if stiffness is null

    
    ### to use only the translation for the deformation
    ### [NOTE] all values are WRT base frame
    #n_dofs: 3
    
    #Qhh: [1,1,1,0.0001,0.0001,0.0001]
    #Qhr: [0,0,0,0,0,0]
    
    #Qrh: [0,0,0,0,0,0]
    #Qrr: [1,1,1,0.0001,0.0001,0.0001]
    
    #Rh: [0.0005,0.0005,0.0005]
    #Rr: [0.0001,0.0001,0.0001]
    
    #mask: [1,1,1,0,0,0]
    
    
    ### to deform the trtajectory in x-y-z directions and around vertical axis
    ### [NOTE] all values are WRT base frame
    n_dofs: 6
    
    Qhh: [1,1,1,1,1,1,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001]
    Qhr: [0,0,0,0,0,0,0,0,0,0,0,0]
    
    Qrh: [0,0,0,0,0,0,0,0,0,0,0,0]
    Qrr: [1,1,1,1,1,1,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001]
    
    Rh: [0.0005,0.0005,0.0005,5,5,5]
    #Rh: [0.00005,0.00005,0.00005,1,1,1]
    
    # lower values will make the robot behavior more aggressive
    Rr: [0.0005,0.0005,0.0005,5,5,5]
    
    ### allows force along the directions where set to 1
    mask: [1,1,1,0,0,1]
    
    
    robot_active: true   # true for GT arbitration - false for MG and IC
    
    ### arbitration parameters
    
    alpha: 0.99           # initial arbitration value - changed dynamically if the arbitration node is active
    alpha_max: 0.99     # to avoid it to be one
    alpha_min: 0.01     # to avoid it to be zero
    alpha_switch: 0.5   # value for which the controller became non cooperative
    
    
    ### do not touch
    base_control: "cgt"
    #control_switch: "ncgt"
    control_switch: "inverse_cgt"
    use_same_reference: false
    use_robot_reference: false
    use_human_reference: true


# microinterpolator control level - no need to touch 
plan_hw:
  type: cnr/control/TopicRobotHW
  appenders: [file, screen]
  levels: [trace, info]
  pattern_layout: "[%5p][%d{HH:mm:ss,SSS}][%M:%L][%c] %m%n"
  file_name: "plan_hw"
  
  joint_names:   
  - joint_0
  - joint_1
  - joint_2
  - joint_3
  - joint_4
  - joint_5
  - joint_6

  base_link: "fake_linear_axis"
  tool_link: "link_6"
  robot_description_param: /robot_description
  robot_description_planning_param: /robot_description_planning

  feedback_joint_state_topic: /joint_states
  command_joint_state_topic:  /joint_pos_target
  sampling_period: 0.004
  diagnostic_period: 0.1
  feedback_joint_state_timeout: 20
  maximum_missing_cycles: 100

  remap_source_args:
  - "/plan_hw/microint/follow_joint_trajectory/cancel"
  - "/plan_hw/microint/follow_joint_trajectory/feedback"
  - "/plan_hw/microint/follow_joint_trajectory/goal"
  - "/plan_hw/microint/follow_joint_trajectory/result"
  - "/plan_hw/microint/follow_joint_trajectory/status"

  remap_target_args:
  - "abb_moveit_lab/follow_joint_trajectory/cancel"
  - "abb_moveit_lab/follow_joint_trajectory/feedback"
  - "abb_moveit_lab/follow_joint_trajectory/goal"
  - "abb_moveit_lab/follow_joint_trajectory/result"
  - "abb_moveit_lab/follow_joint_trajectory/status"

  microinterpolator:
    type: "cnr/control/FollowJointTrajectoryPosVelEffController"
    controlled_joints: all
    interpolator: "thor/ThorPrefilter"
    regulator: "regulator/fake_regulator"
    spline_order: 1
    
    
  microint:
    type: "cnr/control/ScaledFJTPosController"
    controlled_joints: all


  
  
  
  
  
