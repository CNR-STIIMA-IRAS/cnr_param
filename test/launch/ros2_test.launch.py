"""
TEST CNR_PARAM LIBRARY
"""
import os
import unittest
import time

import launch
import launch.actions
import launch.event_handlers.on_process_start
import launch_ros.actions
import launch_testing
import launch_testing.actions
import launch_testing.asserts
import launch_testing.util

from ament_index_python.packages import get_package_share_directory


def generate_test_description():
    """
    Generates the launch description for the test.

    Returns:
        LaunchDescription: The launch description object.
        dict: The locals dictionary.
    """
    ld = launch.LaunchDescription()

    config = os.path.join(
        get_package_share_directory('cnr_param'),
        'config',
        'ros2parameters.yaml'
    )
    config2 = os.path.join(
        get_package_share_directory('cnr_param'),
        'config',
        'par_autogenerated.yaml'
    )
    generic_node_with_parameters = launch_ros.actions.Node(
        package='cnr_param',
        name='test_ros2_parameters_node',
        executable='test_ros2_parameters_node',
        parameters=[config, config2],
        output='screen',
        emulate_tty=True
    )

    cnr_param_getter_node = launch_ros.actions.Node(
        package='cnr_param',
        name='test_ros2_parameters_remote',
        executable='test_ros2_parameters_remote',
        output='screen',
        emulate_tty=True
    )

    ld.add_action(generic_node_with_parameters)
    ld.add_action(cnr_param_getter_node)

    ld.add_action(launch_testing.util.KeepAliveProc())
    ld.add_action(launch_testing.actions.ReadyToTest())

    return ld, locals()


class TestGoodProcess(unittest.TestCase):

    """
    A test case class for testing the process output.

    This class contains test methods to verify that the process output matches
    the expected output.
    """

    def test_output(self):
        """
        Test method to verify that the process output matches the expected
        output

        Args:
            proc_output: The output of the process being tested.

        Returns:
            None
        """
        time.sleep(20)
